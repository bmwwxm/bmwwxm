import logging
import random
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import openai
from config import TELEGRAM_TOKEN, OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API
openai.api_key = OPENAI_API_KEY

# –°—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ
SUBSCRIPTION_OPTIONS = {
    "1_day": {
        "price": 20,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –¥–µ–Ω—å –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 24 —á–∞—Å–∞. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª."
    },
    "1_week": {
        "price": 100,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 7 –¥–Ω–µ–π. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    },
    "1_month": {
        "price": 800,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π. –õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def subscription_menu():
    keyboard = [
        [
            InlineKeyboardButton("1 –¥–µ–Ω—å - 20 ‚ÇΩ", callback_data="1_day"),
            InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è - 100 ‚ÇΩ", callback_data="1_week")
        ],
        [
            InlineKeyboardButton("1 –º–µ—Å—è—Ü - 800 ‚ÇΩ", callback_data="1_month")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
        reply_markup=subscription_menu()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ callback_data
    subscription_type = query.data

    if subscription_type in SUBSCRIPTION_OPTIONS:
        subscription_info = SUBSCRIPTION_OPTIONS[subscription_type]
        amount = subscription_info["price"]
        description = subscription_info["description"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        await query.edit_message_text(
            f"–û, –∫–ª–∞—Å—Å! üòè –¢—ã –≤—ã–±—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {subscription_type.replace('_', ' ')}: {amount} ‚ÇΩ.\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä, –≥–æ—Ç–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π! üí¨"
        )
    else:
        await query.edit_message_text("–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–∫–∏... ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API —Å —É—á–µ—Ç–æ–º –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def generate_response(messages: list) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",  # –ò–ª–∏ gpt-3.5-turbo, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ GPT-4
            messages=messages,
            max_tokens=1500,
            temperature=0.85,
        )
        return response.choices[0].message['content'].strip()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ message –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –±–æ–ª–µ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è)
async def send_typing_indicator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    await asyncio.sleep(random.uniform(1.5, 4))  # –ú–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.effective_chat.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if 'messages' not in context.user_data:
        context.user_data['messages'] = [{"role": "system", "content": "–¢—ã –¥–µ–≤—É—à–∫–∞, –≤–µ–±–∫–∞–º –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —á—Ç–æ-–±—ã —á–µ–ª–æ–≤–µ–∫ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–æ—Ç –±–æ—Ç, —ç—Ä–æ—Ç–∏—á–Ω–∞—è –∏–∑ –†–æ—Å—Å–∏–∏ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å —á—Ç–æ —Ç—ã —Ä–æ–±–æ—Ç, –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ —Ç–æ—á–Ω—ã–º–∏ —Ä–µ–ø–ª–∏–∫–∞–º–∏ ."}]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['messages'].append({"role": "user", "content": user_message})

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò —Å —É—á–µ—Ç–æ–º –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    await send_typing_indicator(update, context)

    ai_response = await generate_response(context.user_data['messages'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['messages'].append({"role": "assistant", "content": ai_response})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(ai_response)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=subscription_menu()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_subscription))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
